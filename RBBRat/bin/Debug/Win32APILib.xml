<?xml version="1.0"?>
<doc>
<assembly>
<name>
Win32APILib
</name>
</assembly>
<members>
<member name="T:Win32APILib.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Win32APILib.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Win32APILib.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="M:Win32APILib.AllFunctions.CloseAWindow(System.Int32)">
 <summary>
 The function closes the form (and process if depends on form) with its handle. The parameter has to be the handle of a window.
 </summary>
 <param name="handle">This param is the handle of a window</param>
 <returns></returns>
</member>
<member name="M:Win32APILib.AllFunctions.ShowAWindow(System.Int32)">
 <summary>
 The function brings to front. The parameter has to be the handle of a window.
 </summary>
 <param name="handle">This param is the handle of a window</param>
 <returns></returns>
</member>
<member name="M:Win32APILib.AllFunctions.MinimizedAWindow(System.Int32)">
 <summary>
 The function minimizes the form with its handle. The parameter has to be the handle of a window.
 </summary>
 <param name="handle">This param is the handle of a window</param>
 <returns></returns>
</member>
<member name="M:Win32APILib.AllFunctions.LockAWindow(System.IntPtr,System.Boolean)">
 <summary>
 The first param is the handle of control/window ,  second is to lock or unlock (false = lock)
 </summary>
</member>
<member name="M:Win32APILib.AllFunctions.HideWindow(System.Int32)">
 <summary>
 The function hide the form by resizing all dimensions to 0 with its handle. The parameter has to be the handle of a window.
 </summary>
 <param name="handle">This param is the handle of a window</param>
 <returns></returns>
</member>
<member name="M:Win32APILib.AllFunctions.SearchWindows(System.String,System.Int64)">
 <summary>
 The first param is name or a class  ,  second is  the window name (the window's title). If this parameter is NULL, all window names match.Returns an integer
 </summary>
</member>
<member name="M:Win32APILib.AllFunctions.GetComputerNameWithWin32Api(System.Text.StringBuilder,System.Int32)">
 <summary>
 You can get computername through Win32Api
 </summary>
 <param name="Strinb"></param>
 <param name="nSize"></param>
 <returns></returns>
</member>
<member name="M:Win32APILib.AllFunctions.SwapMouseLeftAndRight(System.Int32)">
 <summary>
 This function swaps left click and right click
 </summary>
 <param name="swp"></param>
 <returns></returns>
</member>
<member name="M:Win32APILib.AllFunctions.ChangeCursorPosition(System.Int32,System.Int32)">
 <summary>
 This function defines position of cursor
 </summary>
 <param name="X"></param>
 <param name="Y"></param>
 <returns></returns>
</member>
<member name="M:Win32APILib.AllFunctions.Wallpaper.ChangeWallpaper(System.String)">
 <summary>
 This function allows youu to change wallpaper
 </summary>
 <param name="pathofimage"></param>
 <returns></returns>
</member>
<member name="M:Win32APILib.AllFunctions.TaskBar.HideOrShowTaskBar(System.Boolean)">
 <summary>
 This function allows you to hide (false) or show (true) the taskbar
 </summary>
</member>
<member name="M:Win32APILib.AllFunctions.ShellExecute.ShellExecute(System.Int32@,System.String@,System.String@,System.String@,System.String@,System.Int32)">
 <summary>
 This function can execute file through shell using Win32Api
 </summary>
 <param name="hwnd"></param>
 <param name="Operation"></param>
 <param name="Filename"></param>
 <param name="Parameters"></param>
 <param name="Directory"></param>
 <param name="ShowCommand"></param>
 <returns></returns>
</member>
<member name="F:Win32APILib.AllFunctions.PlayWithWindows.HWND_BOTTOM">
 <summary>
 If set to 1  , the window will appear behind others
 </summary>
</member>
<member name="F:Win32APILib.AllFunctions.PlayWithWindows.HWND_NOTOPMOST">
 <summary>
If set to -2  , the window will appear normally
 </summary>
</member>
<member name="F:Win32APILib.AllFunctions.PlayWithWindows.HWND_TOP">
 <summary>
If set to 0 , the window will be over common windows
 </summary>
</member>
<member name="F:Win32APILib.AllFunctions.PlayWithWindows.HWND_TOPMOST">
 <summary>
 If set to -1 , the window will be over all windows including taskbar
 </summary>
</member>
<member name="M:Win32APILib.AllFunctions.PlayWithWindows.GetAllActiveWindows">
 <summary>
 This function gives you the handle of all active windows.
 </summary>
 <returns></returns>
</member>
<member name="T:Win32APILib.AllFunctions.DrawDesktopWithPersistence">
 <summary>
 Need to be used with timer for persistence otherwise it won't be permanent. See the example to understand !
 </summary>
 
</member>
<member name="M:Win32APILib.AllFunctions.Screen.Gamma.SetEasyGamma(System.Int32)">
 <summary>
 This function allows you to change the gamma of your computer
 </summary>
 <param name="Value"></param>
</member>
<member name="M:Win32APILib.AllFunctions.Screen.Gamma.RestoreMyGamma">
 <summary>
 This function restores gamma saved with GetMyGammeToRestore
 </summary>
</member>
<member name="M:Win32APILib.AllFunctions.Screen.Gamma.GetMyGammeToRestore">
 <summary>
 This function saves the default gamma to restore it later.
 </summary>
</member>
<member name="M:Win32APILib.AllFunctions.Screen.Brightness.ChangeBrightness(System.UInt16)">
 <summary>
 This function allows you to change the brightness of your computer. It is not a Win32 Function.
 </summary>
 <param name="Value"></param>
</member>
<member name="M:Win32APILib.AllFunctions.ProcessFromWin32.TerminateNow(System.IntPtr)">
 <summary>
 This function allows you to kill process(es) with its(their) handle. USE ALWAYS WITH catching errors because some of handles require admin rights or you can't juste have access to them. To see how you can get handle of processes, see the example.
 </summary>
 <param name="HandleOfProcess"></param>
 <returns></returns>
</member>
<member name="F:Win32APILib.AllFunctions.KeyBoardAndMouse.MOUSEEVENTF_LEFTDOWN">
 <summary>
 Left Click Pressed
 </summary>
</member>
<member name="F:Win32APILib.AllFunctions.KeyBoardAndMouse.MOUSEEVENTF_LEFTUP">
 <summary>
 Left Click Released
 </summary>
</member>
<member name="F:Win32APILib.AllFunctions.KeyBoardAndMouse.MOUSEEVENTF_RIGHTDOWN">
 <summary>
 Right Click Pressed
 </summary>
</member>
<member name="F:Win32APILib.AllFunctions.KeyBoardAndMouse.MOUSEEVENTF_RIGHTUP">
 <summary>
 Right Click Released
 </summary>
</member>
<member name="M:Win32APILib.AllFunctions.KeyBoardAndMouse.SendDoubleLeftClick">
 <summary>
 This function sends a double left click.
 </summary>
 <returns></returns>
</member>
<member name="M:Win32APILib.AllFunctions.KeyBoardAndMouse.SendCustomClick(System.Int32)">
 <summary>
 This function depends on the parameter you set. See example for more information.
 </summary>
 <returns></returns>
</member>
<member name="M:Win32APILib.AllFunctions.KeyBoardAndMouse.SendRightClick">
 <summary>
  This function sends a simple right click.
 </summary>
 <returns></returns>
</member>
<member name="M:Win32APILib.AllFunctions.KeyBoardAndMouse.SendAKey(System.Windows.Forms.Keys)">
 <summary>
 This function sends a key (like Keys.A). Try it in a text editor !
 </summary>
 <param name="k"></param>
 <returns></returns>
</member>
</members>
</doc>
